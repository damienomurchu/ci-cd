#!groovy
if (params.CLUSTER_NAME.toString().trim() == "") {
    error "CLUSTER_NAME is required to run this pipeline!"
}
String clusterName = CLUSTER_NAME
String clusterInfoDirectory = "osd_clusters/" + clusterName
String installConfigDirectory = ""
String rootWorkspaceDir = ""
String clusterInfoFileName = "clusterInfo.json"
String clusterCredentialsFileName = "clusterCredentials.json"
String apiPrefix = "/api/clusters_mgmt/v1/clusters"

def err = null
String clusterID = ""

node("cirhos_rhel7") {
    timeout(120) { ansiColor("gnome-terminal") { timestamps {
        try {
            currentBuild.displayName = "${currentBuild.displayName} ${clusterName}"
            
            stage("Fetch the integreatly-operator repo") {
                dir("integreatly-operator") {
                    git branch: "master", url: "https://gitlab.cee.redhat.com/integreatly-qe/integreatly-operator.git"
                }
            } // stage
            
            stage("Create the cluster creation config") {
                dir("integreatly-operator") {
                    sh "make ocm/cluster.json OCM_CLUSTER_NAME=rhmi-$(date +\"%m%d_%H%M\")"
                }
            } // stage

            stage("Login to ocm") {
                withCredentials([string(credentialsId: "${OCM_TOKEN}", variable: "OCM_ACCESS_TOKEN")]) {
                    sh "make ocm/login OCM_URL=https://api.stage.openshift.com/ OCM_TOKEN=${OCM_ACCESS_TOKEN}"
                }
            } // stage
            
            stage("Begin cluster creation") {
                sh "make ocm/create/cluster"
                clusterId = ${OCM_CLUSTER_ID}
            } // stage

            stage("Check if cluster is ready") {
                Boolean isReady = isClusterReady(clusterID, apiPrefix)
                while (!isReady) {
                    println "Cluster is not ready yet"
                    sleep time: 5, unit: 'MINUTES'
                    isReady = isClusterReady(clusterID, apiPrefix)
                }
            } // stage

            stage("Get cluster credentials") {
                Boolean areCredentialsAvailable = credentialsAvailable(clusterID, apiPrefix)
                while (!areCredentialsAvailable) {
                    println "Cluster credentials not available yet"
                    sleep time: 3, unit: 'MINUTES'
                    areCredentialsAvailable = credentialsAvailable(clusterID, apiPrefix)
                }
                sh "make ocm/cluster/credentials CLUSTER_ID=${OCM_CLUSTER_ID}"
            } // stage

            stage("Logout from ocm") {
                sh "make ocm/logout"
            } // stage
            
        } catch (caughtError){
            currentBuild.result = "FAILURE"
            err = caughtError
            println caughtError
        } finally {
            notifyBuild(currentBuild.result, err)
        }
    }}} // timeout, ansiColor, timestamps
} // node

def isClusterReady(clusterID, apiPrefix) {
    String clusterStatus = sh (
        script: "ocm get ${apiPrefix}/${clusterID}/status | jq -r .state",
        returnStdout: true
    ).trim()
    return clusterStatus.contains("ready")
}

def credentialsAvailable(clusterID, apiPrefix) {
    String credentialsJSON = sh (
        script: "ocm get ${apiPrefix}/${clusterID}/credentials",
        returnStdout: true
    ).trim()
    return credentialsJSON.contains("kubeadmin")
}

def notifyBuild(String buildStatus, err) {
    if (params.RECIPIENTS.toString().length() > 0) {
        buildStatus =  buildStatus ?: "SUCCESS"
    
        String mailRecipients = "${RECIPIENTS}"
        String subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
        String body = "${subject}\n\n(${env.BUILD_URL})"
    
        if (err != null) {
            body = "${body}\n\n FAILURE was ${err}"
        }
    
        mail body: body, subject: subject, to: mailRecipients   
    }
}
